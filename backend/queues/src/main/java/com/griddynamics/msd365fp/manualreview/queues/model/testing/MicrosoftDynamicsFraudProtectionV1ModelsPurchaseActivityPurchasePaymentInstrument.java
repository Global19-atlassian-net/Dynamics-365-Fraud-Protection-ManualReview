/*
 * Knowledge Gateway Service
 * This API allows merchants using Microsoft Dynamics 365 Fraud Protection to send events for risk evaluation. These events are used to build up information about the purchases the customers are making and provide merchants with a recommendation to approve or reject transactions due to Fraud. For integration and testing, please use the https://api.dfp.microsoft-int.com/ endpoint. For Production, please use https://api.dfp.microsoft.com/.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.griddynamics.msd365fp.manualreview.queues.model.testing;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Builder;

import java.time.OffsetDateTime;
import java.util.Objects;

/**
 * N/A
 */
@Schema(description = "N/A")
@Builder
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-14T20:07:05.300728+04:00[Europe/Saratov]")
public class MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument {
  @JsonProperty("merchantPaymentInstrumentId")
  private String merchantPaymentInstrumentId;

  @JsonProperty("type")
  private String type;

  @JsonProperty("creationDate")
  private OffsetDateTime creationDate;

  @JsonProperty("updateDate")
  private OffsetDateTime updateDate;

  @JsonProperty("state")
  private String state;

  @JsonProperty("cardType")
  private String cardType;

  @JsonProperty("holderName")
  private String holderName;

  @JsonProperty("bin")
  private String bin;

  @JsonProperty("expirationDate")
  private String expirationDate;

  @JsonProperty("lastFourDigits")
  private String lastFourDigits;

  @JsonProperty("email")
  private String email;

  @JsonProperty("billingAgreementId")
  private String billingAgreementId;

  @JsonProperty("payerId")
  private String payerId;

  @JsonProperty("payerStatus")
  private String payerStatus;

  @JsonProperty("addressStatus")
  private String addressStatus;

  @JsonProperty("imei")
  private String imei;

  @JsonProperty("purchaseAmount")
  private java.math.BigDecimal purchaseAmount;

  @JsonProperty("billingAddress")
  private MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrumentAddress billingAddress;

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument merchantPaymentInstrumentId(String merchantPaymentInstrumentId) {
    this.merchantPaymentInstrumentId = merchantPaymentInstrumentId;
    return this;
  }

   /**
   * The identifier of the payment instrument. This information is provided by the merchant.
   * @return merchantPaymentInstrumentId
  **/
  @Schema(description = "The identifier of the payment instrument. This information is provided by the merchant.")
  public String getMerchantPaymentInstrumentId() {
    return merchantPaymentInstrumentId;
  }

  public void setMerchantPaymentInstrumentId(String merchantPaymentInstrumentId) {
    this.merchantPaymentInstrumentId = merchantPaymentInstrumentId;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of payment. Possible values &#x27;CreditCard&#x27; | &#x27;DirectDebit&#x27; | &#x27;PayPal&#x27; | &#x27;MobileBilling&#x27; | &#x27;OnlineBankTransfer&#x27; | &#x27;Invoice&#x27; | &#x27;MerchantGiftCard&#x27; | &#x27;MerchantWallet&#x27; | &#x27;CashOnDelivery&#x27; | &#x27;Paytm&#x27; | &#x27;CCAvenue&#x27;
   * @return type
  **/
  @Schema(required = true, description = "The type of payment. Possible values 'CreditCard' | 'DirectDebit' | 'PayPal' | 'MobileBilling' | 'OnlineBankTransfer' | 'Invoice' | 'MerchantGiftCard' | 'MerchantWallet' | 'CashOnDelivery' | 'Paytm' | 'CCAvenue'")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * The date of the first entry for the payment instrument in the merchant&#x27;s system. The format is ISO 8601.
   * @return creationDate
  **/
  @Schema(description = "The date of the first entry for the payment instrument in the merchant's system. The format is ISO 8601.")
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument updateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
    return this;
  }

   /**
   * The date of the last update for the payment instrument in the merchant&#x27;s system. The format is ISO 8601.
   * @return updateDate
  **/
  @Schema(description = "The date of the last update for the payment instrument in the merchant's system. The format is ISO 8601.")
  public OffsetDateTime getUpdateDate() {
    return updateDate;
  }

  public void setUpdateDate(OffsetDateTime updateDate) {
    this.updateDate = updateDate;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument state(String state) {
    this.state = state;
    return this;
  }

   /**
   * The current state of the PI in merchant&#x27;s system. Possible values &#x27;Active&#x27; | &#x27;Inactive&#x27;
   * @return state
  **/
  @Schema(description = "The current state of the PI in merchant's system. Possible values 'Active' | 'Inactive'")
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument cardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

   /**
   * This attribute is used only for payments of the Credit/Debit Card type. The network the card is provided from. Possible values &#x27;Visa&#x27; | &#x27;Mastercard&#x27; | &#x27;Amex&#x27; | &#x27;ACH&#x27; | &#x27;SEPA&#x27; | &#x27;UnionPay&#x27; | &#x27;Inicis&#x27; | &#x27;MobileBillingCarrier&#x27; | &#x27;Discover&#x27; | &#x27;AllPay&#x27; | &#x27;JCB&#x27; | &#x27;DiscoverDiners&#x27;
   * @return cardType
  **/
  @Schema(description = "This attribute is used only for payments of the Credit/Debit Card type. The network the card is provided from. Possible values 'Visa' | 'Mastercard' | 'Amex' | 'ACH' | 'SEPA' | 'UnionPay' | 'Inicis' | 'MobileBillingCarrier' | 'Discover' | 'AllPay' | 'JCB' | 'DiscoverDiners'")
  public String getCardType() {
    return cardType;
  }

  public void setCardType(String cardType) {
    this.cardType = cardType;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument holderName(String holderName) {
    this.holderName = holderName;
    return this;
  }

   /**
   * The name of the payment instrument&#x27;s user. This attribute is used only for payments of the Credit/Debit Card type.
   * @return holderName
  **/
  @Schema(description = "The name of the payment instrument's user. This attribute is used only for payments of the Credit/Debit Card type.")
  public String getHolderName() {
    return holderName;
  }

  public void setHolderName(String holderName) {
    this.holderName = holderName;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument bin(String bin) {
    this.bin = bin;
    return this;
  }

   /**
   * This attribute is used only for payments of the Credit/Debit Card type.
   * @return bin
  **/
  @Schema(description = "This attribute is used only for payments of the Credit/Debit Card type.")
  public String getBin() {
    return bin;
  }

  public void setBin(String bin) {
    this.bin = bin;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument expirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

   /**
   * The expiration date for the payment instrument in the merchant&#x27;s system. The format is ISO 8601. This attribute is used only for payments of the Credit/Debit Card type.
   * @return expirationDate
  **/
  @Schema(description = "The expiration date for the payment instrument in the merchant's system. The format is ISO 8601. This attribute is used only for payments of the Credit/Debit Card type.")
  public String getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(String expirationDate) {
    this.expirationDate = expirationDate;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument lastFourDigits(String lastFourDigits) {
    this.lastFourDigits = lastFourDigits;
    return this;
  }

   /**
   * This attribute is used only for payments of the Credit/Debit Card type.
   * @return lastFourDigits
  **/
  @Schema(description = "This attribute is used only for payments of the Credit/Debit Card type.")
  public String getLastFourDigits() {
    return lastFourDigits;
  }

  public void setLastFourDigits(String lastFourDigits) {
    this.lastFourDigits = lastFourDigits;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The email address associated with the payment instrument. This attribute is used only for payments of the Paypal type.
   * @return email
  **/
  @Schema(description = "The email address associated with the payment instrument. This attribute is used only for payments of the Paypal type.")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument billingAgreementId(String billingAgreementId) {
    this.billingAgreementId = billingAgreementId;
    return this;
  }

   /**
   * This attribute is used only for payments of the Paypal type.
   * @return billingAgreementId
  **/
  @Schema(description = "This attribute is used only for payments of the Paypal type.")
  public String getBillingAgreementId() {
    return billingAgreementId;
  }

  public void setBillingAgreementId(String billingAgreementId) {
    this.billingAgreementId = billingAgreementId;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument payerId(String payerId) {
    this.payerId = payerId;
    return this;
  }

   /**
   * This attribute is used only for payments of the Paypal type.
   * @return payerId
  **/
  @Schema(description = "This attribute is used only for payments of the Paypal type.")
  public String getPayerId() {
    return payerId;
  }

  public void setPayerId(String payerId) {
    this.payerId = payerId;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument payerStatus(String payerStatus) {
    this.payerStatus = payerStatus;
    return this;
  }

   /**
   * A value that indicates whether PayPal has verified the payer. This attribute is used only for payments of the Paypal type. Possible values &#x27;Verified&#x27; | &#x27;Unverified&#x27;
   * @return payerStatus
  **/
  @Schema(description = "A value that indicates whether PayPal has verified the payer. This attribute is used only for payments of the Paypal type. Possible values 'Verified' | 'Unverified'")
  public String getPayerStatus() {
    return payerStatus;
  }

  public void setPayerStatus(String payerStatus) {
    this.payerStatus = payerStatus;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument addressStatus(String addressStatus) {
    this.addressStatus = addressStatus;
    return this;
  }

   /**
   * A value that indicates whether PayPal has verified the payer&#x27;s address. This attribute is used only for payments of the Paypal type. Possible values &#x27;Confirmed&#x27; | &#x27;Unconfirmed&#x27;
   * @return addressStatus
  **/
  @Schema(description = "A value that indicates whether PayPal has verified the payer's address. This attribute is used only for payments of the Paypal type. Possible values 'Confirmed' | 'Unconfirmed'")
  public String getAddressStatus() {
    return addressStatus;
  }

  public void setAddressStatus(String addressStatus) {
    this.addressStatus = addressStatus;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument imei(String imei) {
    this.imei = imei;
    return this;
  }

   /**
   * This attribute is used only for payments of the Mobilepayment type.
   * @return imei
  **/
  @Schema(description = "This attribute is used only for payments of the Mobilepayment type.")
  public String getImei() {
    return imei;
  }

  public void setImei(String imei) {
    this.imei = imei;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument purchaseAmount(java.math.BigDecimal purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
    return this;
  }

   /**
   * Total purchase amount using this PI for the transaction
   * @return purchaseAmount
  **/
  @Schema(description = "Total purchase amount using this PI for the transaction")
  public java.math.BigDecimal getPurchaseAmount() {
    return purchaseAmount;
  }

  public void setPurchaseAmount(java.math.BigDecimal purchaseAmount) {
    this.purchaseAmount = purchaseAmount;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument billingAddress(MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrumentAddress billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @Schema(description = "")
  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrumentAddress getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrumentAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument = (MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument) o;
    return Objects.equals(this.merchantPaymentInstrumentId, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.merchantPaymentInstrumentId) &&
        Objects.equals(this.type, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.type) &&
        Objects.equals(this.creationDate, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.creationDate) &&
        Objects.equals(this.updateDate, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.updateDate) &&
        Objects.equals(this.state, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.state) &&
        Objects.equals(this.cardType, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.cardType) &&
        Objects.equals(this.holderName, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.holderName) &&
        Objects.equals(this.bin, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.bin) &&
        Objects.equals(this.expirationDate, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.expirationDate) &&
        Objects.equals(this.lastFourDigits, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.lastFourDigits) &&
        Objects.equals(this.email, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.email) &&
        Objects.equals(this.billingAgreementId, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.billingAgreementId) &&
        Objects.equals(this.payerId, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.payerId) &&
        Objects.equals(this.payerStatus, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.payerStatus) &&
        Objects.equals(this.addressStatus, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.addressStatus) &&
        Objects.equals(this.imei, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.imei) &&
        Objects.equals(this.purchaseAmount, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.purchaseAmount) &&
        Objects.equals(this.billingAddress, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument.billingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantPaymentInstrumentId, type, creationDate, updateDate, state, cardType, holderName, bin, expirationDate, lastFourDigits, email, billingAgreementId, payerId, payerStatus, addressStatus, imei, purchaseAmount, billingAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchasePaymentInstrument {\n");
    
    sb.append("    merchantPaymentInstrumentId: ").append(toIndentedString(merchantPaymentInstrumentId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    updateDate: ").append(toIndentedString(updateDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    cardType: ").append(toIndentedString(cardType)).append("\n");
    sb.append("    holderName: ").append(toIndentedString(holderName)).append("\n");
    sb.append("    bin: ").append(toIndentedString(bin)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    lastFourDigits: ").append(toIndentedString(lastFourDigits)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    billingAgreementId: ").append(toIndentedString(billingAgreementId)).append("\n");
    sb.append("    payerId: ").append(toIndentedString(payerId)).append("\n");
    sb.append("    payerStatus: ").append(toIndentedString(payerStatus)).append("\n");
    sb.append("    addressStatus: ").append(toIndentedString(addressStatus)).append("\n");
    sb.append("    imei: ").append(toIndentedString(imei)).append("\n");
    sb.append("    purchaseAmount: ").append(toIndentedString(purchaseAmount)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
