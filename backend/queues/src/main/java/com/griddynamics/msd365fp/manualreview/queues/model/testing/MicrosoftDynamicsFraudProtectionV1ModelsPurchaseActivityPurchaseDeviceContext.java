/*
 * Knowledge Gateway Service
 * This API allows merchants using Microsoft Dynamics 365 Fraud Protection to send events for risk evaluation. These events are used to build up information about the purchases the customers are making and provide merchants with a recommendation to approve or reject transactions due to Fraud. For integration and testing, please use the https://api.dfp.microsoft-int.com/ endpoint. For Production, please use https://api.dfp.microsoft.com/.
 *
 * OpenAPI spec version: v1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.griddynamics.msd365fp.manualreview.queues.model.testing;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Builder;

import java.util.Objects;

/**
 * N/A
 */
@Schema(description = "N/A")
@Builder
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-11-14T20:07:05.300728+04:00[Europe/Saratov]")
public class MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext {
  @JsonProperty("deviceContextId")
  private String deviceContextId;

  @JsonProperty("provider")
  private String provider;

  @JsonProperty("deviceContextDC")
  private String deviceContextDC;

  @JsonProperty("externalDeviceId")
  private String externalDeviceId;

  @JsonProperty("externalDeviceType")
  private String externalDeviceType;

  @JsonProperty("ipAddress")
  private String ipAddress;

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext deviceContextId(String deviceContextId) {
    this.deviceContextId = deviceContextId;
    return this;
  }

   /**
   * The customer&#x27;s Session ID (mastered by GreenId), or the event ID if the session is not available.
   * @return deviceContextId
  **/
  @Schema(required = true, description = "The customer's Session ID (mastered by GreenId), or the event ID if the session is not available.")
  public String getDeviceContextId() {
    return deviceContextId;
  }

  public void setDeviceContextId(String deviceContextId) {
    this.deviceContextId = deviceContextId;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext provider(String provider) {
    this.provider = provider;
    return this;
  }

   /**
   * The provider of device info. Possible values are &#x27;DFPFingerPrinting&#x27; | &#x27;Merchant&#x27;. If not specified, the default is &#x27;DFPFINGERPRINTING&#x27;.
   * @return provider
  **/
  @Schema(description = "The provider of device info. Possible values are 'DFPFingerPrinting' | 'Merchant'. If not specified, the default is 'DFPFINGERPRINTING'.")
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext deviceContextDC(String deviceContextDC) {
    this.deviceContextDC = deviceContextDC;
    return this;
  }

   /**
   * The GreenID datacenter for the Customer’s Session ID.
   * @return deviceContextDC
  **/
  @Schema(description = "The GreenID datacenter for the Customer’s Session ID.")
  public String getDeviceContextDC() {
    return deviceContextDC;
  }

  public void setDeviceContextDC(String deviceContextDC) {
    this.deviceContextDC = deviceContextDC;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext externalDeviceId(String externalDeviceId) {
    this.externalDeviceId = externalDeviceId;
    return this;
  }

   /**
   * The customer’s device ID, as provided and mastered by the merchant.
   * @return externalDeviceId
  **/
  @Schema(description = "The customer’s device ID, as provided and mastered by the merchant.")
  public String getExternalDeviceId() {
    return externalDeviceId;
  }

  public void setExternalDeviceId(String externalDeviceId) {
    this.externalDeviceId = externalDeviceId;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext externalDeviceType(String externalDeviceType) {
    this.externalDeviceType = externalDeviceType;
    return this;
  }

   /**
   * The customer’s device type, as provided and mastered by the merchant. Possible values &#x27;Mobile&#x27; | &#x27;Computer&#x27; | &#x27;MerchantHardware&#x27; | &#x27;Tablet&#x27; | &#x27;GameConsole&#x27;
   * @return externalDeviceType
  **/
  @Schema(description = "The customer’s device type, as provided and mastered by the merchant. Possible values 'Mobile' | 'Computer' | 'MerchantHardware' | 'Tablet' | 'GameConsole'")
  public String getExternalDeviceType() {
    return externalDeviceType;
  }

  public void setExternalDeviceType(String externalDeviceType) {
    this.externalDeviceType = externalDeviceType;
  }

  public MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Customer&#x27;s IP address (provided by Merchant)
   * @return ipAddress
  **/
  @Schema(description = "Customer's IP address (provided by Merchant)")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext = (MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext) o;
    return Objects.equals(this.deviceContextId, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.deviceContextId) &&
        Objects.equals(this.provider, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.provider) &&
        Objects.equals(this.deviceContextDC, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.deviceContextDC) &&
        Objects.equals(this.externalDeviceId, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.externalDeviceId) &&
        Objects.equals(this.externalDeviceType, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.externalDeviceType) &&
        Objects.equals(this.ipAddress, microsoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext.ipAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceContextId, provider, deviceContextDC, externalDeviceId, externalDeviceType, ipAddress);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MicrosoftDynamicsFraudProtectionV1ModelsPurchaseActivityPurchaseDeviceContext {\n");
    
    sb.append("    deviceContextId: ").append(toIndentedString(deviceContextId)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    deviceContextDC: ").append(toIndentedString(deviceContextDC)).append("\n");
    sb.append("    externalDeviceId: ").append(toIndentedString(externalDeviceId)).append("\n");
    sb.append("    externalDeviceType: ").append(toIndentedString(externalDeviceType)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
